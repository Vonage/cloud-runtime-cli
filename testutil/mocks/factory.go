// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	api "vonage-cloud-runtime-cli/pkg/api"
	cmdutil "vonage-cloud-runtime-cli/pkg/cmdutil"
	config "vonage-cloud-runtime-cli/pkg/config"

	iostreams "github.com/cli/cli/v2/pkg/iostreams"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockSurveyInterface is a mock of SurveyInterface interface.
type MockSurveyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyInterfaceMockRecorder
}

// MockSurveyInterfaceMockRecorder is the mock recorder for MockSurveyInterface.
type MockSurveyInterfaceMockRecorder struct {
	mock *MockSurveyInterface
}

// NewMockSurveyInterface creates a new mock instance.
func NewMockSurveyInterface(ctrl *gomock.Controller) *MockSurveyInterface {
	mock := &MockSurveyInterface{ctrl: ctrl}
	mock.recorder = &MockSurveyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyInterface) EXPECT() *MockSurveyInterfaceMockRecorder {
	return m.recorder
}

// AskForUserChoice mocks base method.
func (m *MockSurveyInterface) AskForUserChoice(question string, choices []string, lookup map[string]string, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForUserChoice", question, choices, lookup, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForUserChoice indicates an expected call of AskForUserChoice.
func (mr *MockSurveyInterfaceMockRecorder) AskForUserChoice(question, choices, lookup, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForUserChoice", reflect.TypeOf((*MockSurveyInterface)(nil).AskForUserChoice), question, choices, lookup, defaultValue)
}

// AskForUserInput mocks base method.
func (m *MockSurveyInterface) AskForUserInput(question, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForUserInput", question, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForUserInput indicates an expected call of AskForUserInput.
func (mr *MockSurveyInterfaceMockRecorder) AskForUserInput(question, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForUserInput", reflect.TypeOf((*MockSurveyInterface)(nil).AskForUserInput), question, defaultValue)
}

// AskYesNo mocks base method.
func (m *MockSurveyInterface) AskYesNo(question string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskYesNo", question)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AskYesNo indicates an expected call of AskYesNo.
func (mr *MockSurveyInterfaceMockRecorder) AskYesNo(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskYesNo", reflect.TypeOf((*MockSurveyInterface)(nil).AskYesNo), question)
}

// MockAssetInterface is a mock of AssetInterface interface.
type MockAssetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetInterfaceMockRecorder
}

// MockAssetInterfaceMockRecorder is the mock recorder for MockAssetInterface.
type MockAssetInterfaceMockRecorder struct {
	mock *MockAssetInterface
}

// NewMockAssetInterface creates a new mock instance.
func NewMockAssetInterface(ctrl *gomock.Controller) *MockAssetInterface {
	mock := &MockAssetInterface{ctrl: ctrl}
	mock.recorder = &MockAssetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetInterface) EXPECT() *MockAssetInterfaceMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockAssetInterface) GetTemplate(ctx context.Context, templateName string) (api.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", ctx, templateName)
	ret0, _ := ret[0].(api.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockAssetInterfaceMockRecorder) GetTemplate(ctx, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockAssetInterface)(nil).GetTemplate), ctx, templateName)
}

// GetTemplateNameList mocks base method.
func (m *MockAssetInterface) GetTemplateNameList(ctx context.Context, prefix string, isRecursive bool, limit int) ([]api.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateNameList", ctx, prefix, isRecursive, limit)
	ret0, _ := ret[0].([]api.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateNameList indicates an expected call of GetTemplateNameList.
func (mr *MockAssetInterfaceMockRecorder) GetTemplateNameList(ctx, prefix, isRecursive, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateNameList", reflect.TypeOf((*MockAssetInterface)(nil).GetTemplateNameList), ctx, prefix, isRecursive, limit)
}

// MockReleaseInterface is a mock of ReleaseInterface interface.
type MockReleaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseInterfaceMockRecorder
}

// MockReleaseInterfaceMockRecorder is the mock recorder for MockReleaseInterface.
type MockReleaseInterfaceMockRecorder struct {
	mock *MockReleaseInterface
}

// NewMockReleaseInterface creates a new mock instance.
func NewMockReleaseInterface(ctrl *gomock.Controller) *MockReleaseInterface {
	mock := &MockReleaseInterface{ctrl: ctrl}
	mock.recorder = &MockReleaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseInterface) EXPECT() *MockReleaseInterfaceMockRecorder {
	return m.recorder
}

// GetAsset mocks base method.
func (m *MockReleaseInterface) GetAsset(ctx context.Context, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", ctx, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockReleaseInterfaceMockRecorder) GetAsset(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockReleaseInterface)(nil).GetAsset), ctx, url)
}

// GetLatestRelease mocks base method.
func (m *MockReleaseInterface) GetLatestRelease(ctx context.Context) (api.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx)
	ret0, _ := ret[0].(api.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockReleaseInterfaceMockRecorder) GetLatestRelease(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockReleaseInterface)(nil).GetLatestRelease), ctx)
}

// MockMarketplaceInterface is a mock of MarketplaceInterface interface.
type MockMarketplaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceInterfaceMockRecorder
}

// MockMarketplaceInterfaceMockRecorder is the mock recorder for MockMarketplaceInterface.
type MockMarketplaceInterfaceMockRecorder struct {
	mock *MockMarketplaceInterface
}

// NewMockMarketplaceInterface creates a new mock instance.
func NewMockMarketplaceInterface(ctrl *gomock.Controller) *MockMarketplaceInterface {
	mock := &MockMarketplaceInterface{ctrl: ctrl}
	mock.recorder = &MockMarketplaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketplaceInterface) EXPECT() *MockMarketplaceInterfaceMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockMarketplaceInterface) GetTemplate(ctx context.Context, productID, versionID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", ctx, productID, versionID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockMarketplaceInterfaceMockRecorder) GetTemplate(ctx, productID, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockMarketplaceInterface)(nil).GetTemplate), ctx, productID, versionID)
}

// MockDeploymentInterface is a mock of DeploymentInterface interface.
type MockDeploymentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentInterfaceMockRecorder
}

// MockDeploymentInterfaceMockRecorder is the mock recorder for MockDeploymentInterface.
type MockDeploymentInterfaceMockRecorder struct {
	mock *MockDeploymentInterface
}

// NewMockDeploymentInterface creates a new mock instance.
func NewMockDeploymentInterface(ctrl *gomock.Controller) *MockDeploymentInterface {
	mock := &MockDeploymentInterface{ctrl: ctrl}
	mock.recorder = &MockDeploymentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentInterface) EXPECT() *MockDeploymentInterfaceMockRecorder {
	return m.recorder
}

// CreatePackage mocks base method.
func (m *MockDeploymentInterface) CreatePackage(ctx context.Context, createPackageArgs api.CreatePackageArgs) (api.CreatePackageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", ctx, createPackageArgs)
	ret0, _ := ret[0].(api.CreatePackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockDeploymentInterfaceMockRecorder) CreatePackage(ctx, createPackageArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockDeploymentInterface)(nil).CreatePackage), ctx, createPackageArgs)
}

// CreateProject mocks base method.
func (m *MockDeploymentInterface) CreateProject(ctx context.Context, projectName string) (api.CreateProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, projectName)
	ret0, _ := ret[0].(api.CreateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockDeploymentInterfaceMockRecorder) CreateProject(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockDeploymentInterface)(nil).CreateProject), ctx, projectName)
}

// CreateSecret mocks base method.
func (m *MockDeploymentInterface) CreateSecret(ctx context.Context, s config.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockDeploymentInterfaceMockRecorder) CreateSecret(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockDeploymentInterface)(nil).CreateSecret), ctx, s)
}

// CreateVonageApplication mocks base method.
func (m *MockDeploymentInterface) CreateVonageApplication(ctx context.Context, name string, enableRTC, enableVoice, enableMessages bool) (api.CreateVonageApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVonageApplication", ctx, name, enableRTC, enableVoice, enableMessages)
	ret0, _ := ret[0].(api.CreateVonageApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVonageApplication indicates an expected call of CreateVonageApplication.
func (mr *MockDeploymentInterfaceMockRecorder) CreateVonageApplication(ctx, name, enableRTC, enableVoice, enableMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVonageApplication", reflect.TypeOf((*MockDeploymentInterface)(nil).CreateVonageApplication), ctx, name, enableRTC, enableVoice, enableMessages)
}

// DeleteDebugService mocks base method.
func (m *MockDeploymentInterface) DeleteDebugService(ctx context.Context, serviceName string, preserveData bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDebugService", ctx, serviceName, preserveData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDebugService indicates an expected call of DeleteDebugService.
func (mr *MockDeploymentInterfaceMockRecorder) DeleteDebugService(ctx, serviceName, preserveData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDebugService", reflect.TypeOf((*MockDeploymentInterface)(nil).DeleteDebugService), ctx, serviceName, preserveData)
}

// DeleteInstance mocks base method.
func (m *MockDeploymentInterface) DeleteInstance(ctx context.Context, instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx, instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockDeploymentInterfaceMockRecorder) DeleteInstance(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockDeploymentInterface)(nil).DeleteInstance), ctx, instanceID)
}

// DeployDebugService mocks base method.
func (m *MockDeploymentInterface) DeployDebugService(ctx context.Context, region, applicationID, name string, caps api.Capabilities) (api.DeployResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployDebugService", ctx, region, applicationID, name, caps)
	ret0, _ := ret[0].(api.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployDebugService indicates an expected call of DeployDebugService.
func (mr *MockDeploymentInterfaceMockRecorder) DeployDebugService(ctx, region, applicationID, name, caps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployDebugService", reflect.TypeOf((*MockDeploymentInterface)(nil).DeployDebugService), ctx, region, applicationID, name, caps)
}

// DeployInstance mocks base method.
func (m *MockDeploymentInterface) DeployInstance(ctx context.Context, deployInstanceArgs api.DeployInstanceArgs) (api.DeployInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployInstance", ctx, deployInstanceArgs)
	ret0, _ := ret[0].(api.DeployInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployInstance indicates an expected call of DeployInstance.
func (mr *MockDeploymentInterfaceMockRecorder) DeployInstance(ctx, deployInstanceArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployInstance", reflect.TypeOf((*MockDeploymentInterface)(nil).DeployInstance), ctx, deployInstanceArgs)
}

// GenerateVonageApplicationKeys mocks base method.
func (m *MockDeploymentInterface) GenerateVonageApplicationKeys(ctx context.Context, appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVonageApplicationKeys", ctx, appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateVonageApplicationKeys indicates an expected call of GenerateVonageApplicationKeys.
func (mr *MockDeploymentInterfaceMockRecorder) GenerateVonageApplicationKeys(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVonageApplicationKeys", reflect.TypeOf((*MockDeploymentInterface)(nil).GenerateVonageApplicationKeys), ctx, appID)
}

// GetServiceReadyStatus mocks base method.
func (m *MockDeploymentInterface) GetServiceReadyStatus(ctx context.Context, serviceName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceReadyStatus", ctx, serviceName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceReadyStatus indicates an expected call of GetServiceReadyStatus.
func (mr *MockDeploymentInterfaceMockRecorder) GetServiceReadyStatus(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceReadyStatus", reflect.TypeOf((*MockDeploymentInterface)(nil).GetServiceReadyStatus), ctx, serviceName)
}

// ListVonageApplications mocks base method.
func (m *MockDeploymentInterface) ListVonageApplications(ctx context.Context, filter string) (api.ListVonageApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVonageApplications", ctx, filter)
	ret0, _ := ret[0].(api.ListVonageApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVonageApplications indicates an expected call of ListVonageApplications.
func (mr *MockDeploymentInterfaceMockRecorder) ListVonageApplications(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVonageApplications", reflect.TypeOf((*MockDeploymentInterface)(nil).ListVonageApplications), ctx, filter)
}

// RemoveSecret mocks base method.
func (m *MockDeploymentInterface) RemoveSecret(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecret", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret.
func (mr *MockDeploymentInterfaceMockRecorder) RemoveSecret(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockDeploymentInterface)(nil).RemoveSecret), ctx, name)
}

// UpdateSecret mocks base method.
func (m *MockDeploymentInterface) UpdateSecret(ctx context.Context, s config.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockDeploymentInterfaceMockRecorder) UpdateSecret(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockDeploymentInterface)(nil).UpdateSecret), ctx, s)
}

// UploadTgz mocks base method.
func (m *MockDeploymentInterface) UploadTgz(ctx context.Context, fileBytes []byte) (api.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTgz", ctx, fileBytes)
	ret0, _ := ret[0].(api.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTgz indicates an expected call of UploadTgz.
func (mr *MockDeploymentInterfaceMockRecorder) UploadTgz(ctx, fileBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTgz", reflect.TypeOf((*MockDeploymentInterface)(nil).UploadTgz), ctx, fileBytes)
}

// WatchDeployment mocks base method.
func (m *MockDeploymentInterface) WatchDeployment(ctx context.Context, out *iostreams.IOStreams, packageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchDeployment", ctx, out, packageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchDeployment indicates an expected call of WatchDeployment.
func (mr *MockDeploymentInterfaceMockRecorder) WatchDeployment(ctx, out, packageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDeployment", reflect.TypeOf((*MockDeploymentInterface)(nil).WatchDeployment), ctx, out, packageID)
}

// MockDatastoreInterface is a mock of DatastoreInterface interface.
type MockDatastoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreInterfaceMockRecorder
}

// MockDatastoreInterfaceMockRecorder is the mock recorder for MockDatastoreInterface.
type MockDatastoreInterfaceMockRecorder struct {
	mock *MockDatastoreInterface
}

// NewMockDatastoreInterface creates a new mock instance.
func NewMockDatastoreInterface(ctrl *gomock.Controller) *MockDatastoreInterface {
	mock := &MockDatastoreInterface{ctrl: ctrl}
	mock.recorder = &MockDatastoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastoreInterface) EXPECT() *MockDatastoreInterfaceMockRecorder {
	return m.recorder
}

// GetInstanceByID mocks base method.
func (m *MockDatastoreInterface) GetInstanceByID(ctx context.Context, instanceID string) (api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceByID", ctx, instanceID)
	ret0, _ := ret[0].(api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceByID indicates an expected call of GetInstanceByID.
func (mr *MockDatastoreInterfaceMockRecorder) GetInstanceByID(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceByID", reflect.TypeOf((*MockDatastoreInterface)(nil).GetInstanceByID), ctx, instanceID)
}

// GetInstanceByProjectAndInstanceName mocks base method.
func (m *MockDatastoreInterface) GetInstanceByProjectAndInstanceName(ctx context.Context, projectName, instanceName string) (api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceByProjectAndInstanceName", ctx, projectName, instanceName)
	ret0, _ := ret[0].(api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceByProjectAndInstanceName indicates an expected call of GetInstanceByProjectAndInstanceName.
func (mr *MockDatastoreInterfaceMockRecorder) GetInstanceByProjectAndInstanceName(ctx, projectName, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceByProjectAndInstanceName", reflect.TypeOf((*MockDatastoreInterface)(nil).GetInstanceByProjectAndInstanceName), ctx, projectName, instanceName)
}

// GetLatestProductVersionByID mocks base method.
func (m *MockDatastoreInterface) GetLatestProductVersionByID(ctx context.Context, id string) (api.ProductVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestProductVersionByID", ctx, id)
	ret0, _ := ret[0].(api.ProductVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestProductVersionByID indicates an expected call of GetLatestProductVersionByID.
func (mr *MockDatastoreInterfaceMockRecorder) GetLatestProductVersionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestProductVersionByID", reflect.TypeOf((*MockDatastoreInterface)(nil).GetLatestProductVersionByID), ctx, id)
}

// GetProject mocks base method.
func (m *MockDatastoreInterface) GetProject(ctx context.Context, accountID, name string) (api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, accountID, name)
	ret0, _ := ret[0].(api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockDatastoreInterfaceMockRecorder) GetProject(ctx, accountID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockDatastoreInterface)(nil).GetProject), ctx, accountID, name)
}

// GetRegion mocks base method.
func (m *MockDatastoreInterface) GetRegion(ctx context.Context, alias string) (api.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, alias)
	ret0, _ := ret[0].(api.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockDatastoreInterfaceMockRecorder) GetRegion(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockDatastoreInterface)(nil).GetRegion), ctx, alias)
}

// GetRuntimeByName mocks base method.
func (m *MockDatastoreInterface) GetRuntimeByName(ctx context.Context, name string) (api.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeByName", ctx, name)
	ret0, _ := ret[0].(api.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeByName indicates an expected call of GetRuntimeByName.
func (mr *MockDatastoreInterfaceMockRecorder) GetRuntimeByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeByName", reflect.TypeOf((*MockDatastoreInterface)(nil).GetRuntimeByName), ctx, name)
}

// ListProducts mocks base method.
func (m *MockDatastoreInterface) ListProducts(ctx context.Context) ([]api.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx)
	ret0, _ := ret[0].([]api.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockDatastoreInterfaceMockRecorder) ListProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockDatastoreInterface)(nil).ListProducts), ctx)
}

// ListRegions mocks base method.
func (m *MockDatastoreInterface) ListRegions(ctx context.Context) ([]api.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx)
	ret0, _ := ret[0].([]api.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockDatastoreInterfaceMockRecorder) ListRegions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockDatastoreInterface)(nil).ListRegions), ctx)
}

// ListRuntimes mocks base method.
func (m *MockDatastoreInterface) ListRuntimes(ctx context.Context) ([]api.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuntimes", ctx)
	ret0, _ := ret[0].([]api.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuntimes indicates an expected call of ListRuntimes.
func (mr *MockDatastoreInterfaceMockRecorder) ListRuntimes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuntimes", reflect.TypeOf((*MockDatastoreInterface)(nil).ListRuntimes), ctx)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// APIKey mocks base method.
func (m *MockFactory) APIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIKey indicates an expected call of APIKey.
func (mr *MockFactoryMockRecorder) APIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIKey", reflect.TypeOf((*MockFactory)(nil).APIKey))
}

// APISecret mocks base method.
func (m *MockFactory) APISecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APISecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// APISecret indicates an expected call of APISecret.
func (mr *MockFactoryMockRecorder) APISecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APISecret", reflect.TypeOf((*MockFactory)(nil).APISecret))
}

// AssetClient mocks base method.
func (m *MockFactory) AssetClient() cmdutil.AssetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetClient")
	ret0, _ := ret[0].(cmdutil.AssetInterface)
	return ret0
}

// AssetClient indicates an expected call of AssetClient.
func (mr *MockFactoryMockRecorder) AssetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetClient", reflect.TypeOf((*MockFactory)(nil).AssetClient))
}

// CliConfig mocks base method.
func (m *MockFactory) CliConfig() config.CLIConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliConfig")
	ret0, _ := ret[0].(config.CLIConfig)
	return ret0
}

// CliConfig indicates an expected call of CliConfig.
func (mr *MockFactoryMockRecorder) CliConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliConfig", reflect.TypeOf((*MockFactory)(nil).CliConfig))
}

// ConfigFilePath mocks base method.
func (m *MockFactory) ConfigFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigFilePath indicates an expected call of ConfigFilePath.
func (mr *MockFactoryMockRecorder) ConfigFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFilePath", reflect.TypeOf((*MockFactory)(nil).ConfigFilePath))
}

// Datastore mocks base method.
func (m *MockFactory) Datastore() cmdutil.DatastoreInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datastore")
	ret0, _ := ret[0].(cmdutil.DatastoreInterface)
	return ret0
}

// Datastore indicates an expected call of Datastore.
func (mr *MockFactoryMockRecorder) Datastore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datastore", reflect.TypeOf((*MockFactory)(nil).Datastore))
}

// Deadline mocks base method.
func (m *MockFactory) Deadline() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Deadline indicates an expected call of Deadline.
func (mr *MockFactoryMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockFactory)(nil).Deadline))
}

// DeploymentClient mocks base method.
func (m *MockFactory) DeploymentClient() cmdutil.DeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploymentClient")
	ret0, _ := ret[0].(cmdutil.DeploymentInterface)
	return ret0
}

// DeploymentClient indicates an expected call of DeploymentClient.
func (mr *MockFactoryMockRecorder) DeploymentClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentClient", reflect.TypeOf((*MockFactory)(nil).DeploymentClient))
}

// GlobalOptions mocks base method.
func (m *MockFactory) GlobalOptions() *config.GlobalOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalOptions")
	ret0, _ := ret[0].(*config.GlobalOptions)
	return ret0
}

// GlobalOptions indicates an expected call of GlobalOptions.
func (mr *MockFactoryMockRecorder) GlobalOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalOptions", reflect.TypeOf((*MockFactory)(nil).GlobalOptions))
}

// GraphQLURL mocks base method.
func (m *MockFactory) GraphQLURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLURL indicates an expected call of GraphQLURL.
func (mr *MockFactoryMockRecorder) GraphQLURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLURL", reflect.TypeOf((*MockFactory)(nil).GraphQLURL))
}

// HTTPClient mocks base method.
func (m *MockFactory) HTTPClient() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockFactoryMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockFactory)(nil).HTTPClient))
}

// IOStreams mocks base method.
func (m *MockFactory) IOStreams() *iostreams.IOStreams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOStreams")
	ret0, _ := ret[0].(*iostreams.IOStreams)
	return ret0
}

// IOStreams indicates an expected call of IOStreams.
func (mr *MockFactoryMockRecorder) IOStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOStreams", reflect.TypeOf((*MockFactory)(nil).IOStreams))
}

// Init mocks base method.
func (m *MockFactory) Init(ctx context.Context, cfg config.CLIConfig, opts *config.GlobalOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, cfg, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockFactoryMockRecorder) Init(ctx, cfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFactory)(nil).Init), ctx, cfg, opts)
}

// InitDatastore mocks base method.
func (m *MockFactory) InitDatastore(cfg config.CLIConfig, opts *config.GlobalOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitDatastore", cfg, opts)
}

// InitDatastore indicates an expected call of InitDatastore.
func (mr *MockFactoryMockRecorder) InitDatastore(cfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDatastore", reflect.TypeOf((*MockFactory)(nil).InitDatastore), cfg, opts)
}

// InitDeploymentClient mocks base method.
func (m *MockFactory) InitDeploymentClient(ctx context.Context, regionAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDeploymentClient", ctx, regionAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDeploymentClient indicates an expected call of InitDeploymentClient.
func (mr *MockFactoryMockRecorder) InitDeploymentClient(ctx, regionAlias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDeploymentClient", reflect.TypeOf((*MockFactory)(nil).InitDeploymentClient), ctx, regionAlias)
}

// MarketplaceClient mocks base method.
func (m *MockFactory) MarketplaceClient() cmdutil.MarketplaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketplaceClient")
	ret0, _ := ret[0].(cmdutil.MarketplaceInterface)
	return ret0
}

// MarketplaceClient indicates an expected call of MarketplaceClient.
func (mr *MockFactoryMockRecorder) MarketplaceClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketplaceClient", reflect.TypeOf((*MockFactory)(nil).MarketplaceClient))
}

// Region mocks base method.
func (m *MockFactory) Region() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Region")
	ret0, _ := ret[0].(string)
	return ret0
}

// Region indicates an expected call of Region.
func (mr *MockFactoryMockRecorder) Region() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Region", reflect.TypeOf((*MockFactory)(nil).Region))
}

// ReleaseClient mocks base method.
func (m *MockFactory) ReleaseClient() cmdutil.ReleaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseClient")
	ret0, _ := ret[0].(cmdutil.ReleaseInterface)
	return ret0
}

// ReleaseClient indicates an expected call of ReleaseClient.
func (mr *MockFactoryMockRecorder) ReleaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseClient", reflect.TypeOf((*MockFactory)(nil).ReleaseClient))
}

// SetCliConfig mocks base method.
func (m *MockFactory) SetCliConfig(opts config.CLIConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCliConfig", opts)
}

// SetCliConfig indicates an expected call of SetCliConfig.
func (mr *MockFactoryMockRecorder) SetCliConfig(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCliConfig", reflect.TypeOf((*MockFactory)(nil).SetCliConfig), opts)
}

// SetGlobalOptions mocks base method.
func (m *MockFactory) SetGlobalOptions(opts *config.GlobalOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobalOptions", opts)
}

// SetGlobalOptions indicates an expected call of SetGlobalOptions.
func (mr *MockFactoryMockRecorder) SetGlobalOptions(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalOptions", reflect.TypeOf((*MockFactory)(nil).SetGlobalOptions), opts)
}

// Survey mocks base method.
func (m *MockFactory) Survey() cmdutil.SurveyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Survey")
	ret0, _ := ret[0].(cmdutil.SurveyInterface)
	return ret0
}

// Survey indicates an expected call of Survey.
func (mr *MockFactoryMockRecorder) Survey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Survey", reflect.TypeOf((*MockFactory)(nil).Survey))
}

// Timeout mocks base method.
func (m *MockFactory) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockFactoryMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockFactory)(nil).Timeout))
}
